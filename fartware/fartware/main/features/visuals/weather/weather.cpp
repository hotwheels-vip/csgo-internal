#include "weather.h"
#include "../../../includes.h"
#include "../../../convars/convars.h"

constexpr static unsigned char collide_data[] = {
	0xB8, 0x01, 0x00, 0x00, 0x56, 0x50, 0x48, 0x59, 0x00, 0x01, 0x00, 0x00,  0x9C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x80, 0x3F,
	0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x20, 0x16, 0x6A, 0xC1,  0xC0, 0x0E, 0x1C, 0xC1, 0x80, 0x13, 0xD0, 0x3F, 0xE2, 0x26, 0x11, 0x48,
	0xE2, 0x26, 0x11, 0x48, 0xE2, 0x26, 0x11, 0x48, 0x72, 0x4E, 0x08, 0xF44, 0xD1, 0x9C, 0x01, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x56, 0x50, 0x53, 0xD0, 0x00, 0x00, 0x00,  0x06, 0x00, 0x00, 0x00, 0x04, 0x15, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
	0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x03, 0x00,  0x02, 0x00, 0x12, 0x00, 0x01, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFD, 0x7F,
	0x01, 0x00, 0x15, 0x00, 0x03, 0x00, 0x28, 0x00, 0x02, 0xB0, 0x00, 0x00,  0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x0F, 0x00, 0x01, 0x00, 0xF6, 0x7F,
	0x03, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00, 0x15, 0x00,  0x04, 0x00, 0xFA, 0x7F, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x06, 0x00, 0x13, 0x00, 0x05, 0x00, 0xFA, 0x7F, 0x05, 0x60, 0x00, 0x00,  0x00, 0x00, 0xEE, 0x7F, 0x02, 0x00, 0x18, 0x00, 0x06, 0x00, 0xFA, 0x7F,
	0x06, 0x50, 0x00, 0x00, 0x01, 0x00, 0xF1, 0x7F, 0x04, 0x00, 0x03, 0x00,  0x03, 0x00, 0xEB, 0x7F, 0x07, 0x40, 0x00, 0x00, 0x03, 0x00, 0xFD, 0x7F,
	0x04, 0x00, 0x04, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x08, 0x10, 0x00, 0x00,  0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0xFC, 0x7F, 0x04, 0x00, 0xEB, 0x7F,
	0x09, 0x00, 0x00, 0x00, 0x05, 0x00, 0xED, 0x7F, 0x06, 0x00, 0x03, 0x00,  0x07, 0x00, 0xFA, 0x7F, 0x0A, 0x30, 0x00, 0x00, 0x07, 0x00, 0xFD, 0x7F,
	0x06, 0x00, 0x03, 0x00, 0x03, 0x00, 0xF4, 0x7F, 0x0B, 0x20, 0x00, 0x00,  0x03, 0x00, 0xFD, 0x7F, 0x06, 0x00, 0xE8, 0x7F, 0x02, 0x00, 0xD8, 0x7F,
	0x46, 0xAD, 0x9D, 0xC3, 0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE, 0xAA, 0x43,  0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43,
	0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0x46, 0xAD, 0x9D, 0xC3,  0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00, 0x00,
	0x46, 0xAD, 0x9D, 0xC3, 0x33, 0x4C, 0x92, 0x43, 0x59, 0x0E, 0xA9, 0xC3,  0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
	0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43,  0x1F, 0x0D, 0x9C, 0xC3, 0x80, 0xAE, 0xAA, 0x43, 0x00, 0x00, 0x00, 0x00,
	0xE4, 0x0B, 0x8F, 0x43, 0x1F, 0x0D, 0x9C, 0xC3, 0x59, 0x0E, 0xA9, 0xC3,  0x00, 0x00, 0x00, 0x00, 0xE4, 0x0B, 0x8F, 0x43, 0x33, 0x4C, 0x92, 0x43,
	0x59, 0x0E, 0xA9, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0xB0, 0xFE, 0xFF, 0xFF, 0x20, 0x16, 0x6A, 0xC1, 0xC0, 0x0E, 0x1C, 0xC1,
	0x80, 0x13, 0xD0, 0x3F, 0x72, 0x4E, 0x08, 0x44, 0x8A, 0x8B, 0x9C, 0x00,  0x73, 0x6F, 0x6C, 0x69, 0x64, 0x20, 0x7B, 0x0A, 0x22, 0x69, 0x6E, 0x64,
	0x65, 0x78, 0x22, 0x20, 0x22, 0x30, 0x22, 0x0A, 0x22, 0x6D, 0x61, 0x73,  0x73, 0x22, 0x20, 0x22, 0x35, 0x30, 0x30, 0x30, 0x30, 0x2E, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x22, 0x0A, 0x22, 0x73, 0x75, 0x72, 0x66, 0x61,  0x63, 0x65, 0x70, 0x72, 0x6F, 0x70, 0x22, 0x20, 0x22, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6C, 0x74, 0x22, 0x0A, 0x22, 0x76, 0x6F, 0x6C, 0x75, 0x6D,  0x65, 0x22, 0x20, 0x22, 0x31, 0x35, 0x30, 0x38, 0x30, 0x32, 0x33, 0x32,
	0x30, 0x35, 0x38, 0x38, 0x38, 0x30, 0x2E, 0x30, 0x30, 0x30, 0x30, 0x30,  0x30, 0x22, 0x0A, 0x7D, 0x0A, 0x00
};

void weather_t::on_frame_stage_notify( e_client_frame_stage stage )
{
	//if ( stage != e_client_frame_stage::start )
	//	return;

	//auto reset = [ & ]( ) {
	//	if ( this->m_created ) {
	//		for ( auto i = 0; i <= interfaces.m_client_entity_list->get_highest_entity_index( ); ++i ) {
	//			const auto entity = reinterpret_cast< c_base_entity* >( interfaces.m_client_entity_list->get_client_entity( i ) );
	//			if ( !entity )
	//				continue;

	//			const auto client_networkable = entity->client_networkable( );
	//			if ( !client_networkable )
	//				continue;

	//			auto client_class = client_networkable->get_client_class( );
	//			if ( !client_class )
	//				continue;

	//			if ( client_class->m_class_id == e_class_index::cprecipitation ) {
	//				client_networkable->pre_data_update( 0 );
	//				client_networkable->on_pre_data_changed( 0 );

	//				*( int* )( ( uintptr_t )entity + 0xA00 ) = -1;

	//				const_cast< c_vector& >( entity->collideable( )->obb_mins( ) ) = c_vector{ 0, 0, 0 };
	//				const_cast< c_vector& >( entity->collideable( )->obb_max( ) )  = c_vector{ 0, 0, 0 };

	//				client_networkable->on_data_changed( 0 );
	//				client_networkable->post_data_update( 0 );
	//				client_networkable->release( );
	//			}
	//		}

	//		interfaces.m_physics_collisons->v_collide_unload( &this->m_collide );
	//		this->m_created = false;
	//		this->m_timer   = -1;
	//	}
	//};

	//static auto wh = 1;

	//if ( !wh ) {
	//	reset( );
	//	return;
	//}

	//if ( this->m_timer > -1 ) {
	//	--this->m_timer;
	//	if ( this->m_timer == 0 ) {
	//		reset( );
	//	}
	//}

	//if ( this->m_last_type.has_value( ) && this->m_last_type.value( ) != wh )
	//	reset( );

	//this->m_last_type = wh;

	//if ( this->m_created )
	//	return;

	//memset( &this->m_collide, 0, sizeof( this->m_collide ) );

	//static c_base_client* precipitation_client_class = { };
	//if ( !precipitation_client_class ) {
	//	for ( auto client_class = interfaces.m_client->get_all_classes( ); client_class; client_class = client_class->m_next ) {
	//		if ( client_class->m_class_id == e_class_index::cprecipitation ) {
	//			precipitation_client_class = client_class;
	//			break;
	//		}
	//	}
	//}

	//if ( precipitation_client_class && precipitation_client_class->m_create_fn ) {
	//	auto* rain_networkable = ( ( void* ( * )( int, int ))precipitation_client_class->m_create_fn )( 2048 - 1, 0 );
	//	if ( !rain_networkable )
	//		return;

	//	c_client_unknown* rain_unk = ( ( c_client_networkable* )rain_networkable )->get_client_unknown( );
	//	if ( !rain_unk )
	//		return;

	//	auto rain_ent = ( c_base_entity* )rain_unk->get_base_entity( );
	//	if ( !rain_ent )
	//		return;

	//	if ( !rain_ent->client_networkable( ) )
	//		return;

	//	rain_ent->client_networkable( )->pre_data_update( 0 );
	//	rain_ent->client_networkable( )->on_pre_data_changed( 0 );
	//	rain_ent->other_index( ) = -1;

	//	if ( convars.find( fnv1a::hash_const( "r_RainRadius" ) )->get_float( ) != 1000.F )
	//		convars.find( fnv1a::hash_const( "r_RainRadius" ) )->set_value( 1000.F );

	//	*( int* )( ( uintptr_t )rain_ent + 0xA00 ) = wh == 1 ? 4 : 7;

	//	const_cast< c_vector& >( rain_ent->collideable( )->obb_mins( ) ) = c_vector( -32768.F, -32768.F, -32768.F );
	//	const_cast< c_vector& >( rain_ent->collideable( )->obb_max( ) )  = c_vector( 32768.F, 32768.F, 32768.F );

	//	interfaces.m_physics_collisons->v_collide_load( &this->m_collide, 1, ( const char* )collide_data, sizeof( collide_data ) );

	//	rain_ent->model_index( ) = -1;

	//	rain_ent->client_networkable( )->on_data_changed( 0 );
	//	rain_ent->client_networkable( )->post_data_update( 0 );

	//	this->m_created = true;
	//}
}